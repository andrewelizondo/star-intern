provider "aws" {
  region = "us-east-1"
}

resource "aws_ecr_repository" "backend_docker_image" {
  name = "backend_docker_image"
  force_delete = true
}
data "aws_ecr_authorization_token" "token" {}

// ===Docker Build Module===
provider "docker" {
  host = "unix:///var/run/docker.sock"
  registry_auth {
    address = data.aws_ecr_authorization_token.token.proxy_endpoint
    username = data.aws_ecr_authorization_token.token.user_name
    password  = data.aws_ecr_authorization_token.token.password
  }
}

// platform build workaround
resource "null_resource" "docker_build" {
  provisioner "local-exec" {
    command = "docker buildx build --platform linux/amd64 -t ${aws_ecr_repository.backend_docker_image.repository_url}:latest app/backend"
  }
}

// platform build workaround
resource "null_resource" "docker_push" {
  provisioner "local-exec" {
    command = "docker push ${aws_ecr_repository.backend_docker_image.repository_url}:latest"
  }
    depends_on = [null_resource.docker_build, aws_ecr_repository.backend_docker_image]
}

/* Does not support platform build
resource "docker_image" "backend-docker-image" {
  name = "${aws_ecr_repository.backend_docker_image.repository_url}:latest"
  build {
    context = "app/backend"
    build_args = {
      platform = "linux/amd64"
    }
  }
}


resource "docker_registry_image" "media-handler" {
  name = aws_ecr_repository.backend_docker_image.repository_url
}
*/

// ===VPC Module===
# Create a VPC
resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
  enable_dns_support = true
  enable_dns_hostnames = true

  tags = {
    Name = "eks-vpc"
  }
}

# Create an Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "eks-igw"
  }
}

resource "aws_eip" "lb" {
  depends_on    = [aws_internet_gateway.igw]
  domain        = "vpc"
}

resource "aws_nat_gateway" "natgw" {
  allocation_id = aws_eip.lb.id
  subnet_id     = aws_subnet.public_subnet_1.id
  depends_on = [aws_internet_gateway.igw]
  tags = {
    Name = "gw NAT"
  }
}

# Create Public Subnets
resource "aws_subnet" "public_subnet_1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true

  tags = {
    Name = "public-subnet-1"
  }
}

resource "aws_subnet" "public_subnet_2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "us-east-1b"
  map_public_ip_on_launch = true

  tags = {
    Name = "public-subnet-2"
  }
}

# Create Private Subnets for EKS
resource "aws_subnet" "private_subnet_1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.3.0/24"
  availability_zone       = "us-east-1a"

  tags = {
    Name = "private-subnet-1"
  }
}

resource "aws_subnet" "private_subnet_2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.4.0/24"
  availability_zone       = "us-east-1b"

  tags = {
    Name = "private-subnet-2"
  }
}

# Create a Route Table for Public Subnets
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "public-route-table"
  }
}

# Associate Public Subnets with Route Table
resource "aws_route_table_association" "public_subnet_1" {
  subnet_id      = aws_subnet.public_subnet_1.id
  route_table_id = aws_route_table.public.id
}

resource "aws_route_table_association" "public_subnet_2" {
  subnet_id      = aws_subnet.public_subnet_2.id
  route_table_id = aws_route_table.public.id
}

# Create a Route Table for private Subnets
resource "aws_route_table" "private" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.natgw.id
  }

  tags = {
    Name = "private-route-table"
  }
}

# Associate Private Subnets with Route Table
resource "aws_route_table_association" "private_subnet_1" {
  subnet_id      = aws_subnet.private_subnet_1.id
  route_table_id = aws_route_table.private.id
}

resource "aws_route_table_association" "private_subnet_2" {
  subnet_id      = aws_subnet.private_subnet_2.id
  route_table_id = aws_route_table.private.id
}

// === EKS Cluster ===
resource "aws_iam_role" "eks_cluster_role" {
  name = "eks-cluster-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect = "Allow"
      Principal = {
        Service = "eks.amazonaws.com"
      }
      Action = "sts:AssumeRole"
    }]
  })
}

resource "aws_iam_role_policy_attachment" "eks_cluster_policy" {
  role       = aws_iam_role.eks_cluster_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
}

resource "aws_eks_cluster" "eks" {
  name     = "agent-app-cluster"
  role_arn = aws_iam_role.eks_cluster_role.arn

  vpc_config {
    endpoint_private_access = true
    subnet_ids = [aws_subnet.private_subnet_1.id, aws_subnet.private_subnet_2.id]
  }

  depends_on = [aws_iam_role_policy_attachment.eks_cluster_policy]
}

// IAM Role for EKS Worker Nodes
resource "aws_iam_role" "eks_node_role" {
  name = "eks-node-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
      Action = "sts:AssumeRole"
    }]
  })
}

resource "aws_iam_role_policy_attachment" "eks_worker_node_policy" {
  role       = aws_iam_role.eks_node_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
}

resource "aws_iam_role_policy_attachment" "eks_cni_policy" {
  role       = aws_iam_role.eks_node_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
}

resource "aws_iam_role_policy_attachment" "eks_ec2_container_registry" {
  role       = aws_iam_role.eks_node_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
}

# Create an EKS Node Group
resource "aws_eks_node_group" "eks_nodes" {
  cluster_name    = aws_eks_cluster.eks.name
  node_group_name = "eks-node-group"
  node_role_arn   = aws_iam_role.eks_node_role.arn
  subnet_ids      = [aws_subnet.private_subnet_1.id, aws_subnet.private_subnet_2.id]
  instance_types  = ["t3.medium"]

  scaling_config {
    desired_size = 2
    max_size     = 3
    min_size     = 1
  }

  depends_on = [
    aws_nat_gateway.natgw,
    aws_iam_role_policy_attachment.eks_worker_node_policy,
    aws_iam_role_policy_attachment.eks_cni_policy,
    aws_iam_role_policy_attachment.eks_ec2_container_registry
  ]

  timeouts {
    create = "60m"
  }
}

# Security Group for EKS Cluster
resource "aws_security_group" "eks_sg" {
  vpc_id = aws_vpc.main.id

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "eks-security-group"
  }
}

// === IRSA ===

data "tls_certificate" "tls_cert" {
  url = aws_eks_cluster.eks.identity[0].oidc[0].issuer
}

resource "aws_iam_openid_connect_provider" "oidc_provider" {
  client_id_list  = ["sts.amazonaws.com"]
  thumbprint_list = [data.tls_certificate.tls_cert.certificates[0].sha1_fingerprint]
  url             = aws_eks_cluster.eks.identity[0].oidc[0].issuer
}

resource "aws_iam_role" "eks-irsa-role" {
  name = "eks-irsa-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Sid    = ""
      Effect = "Allow",
      Principal = {
        Federated = aws_iam_openid_connect_provider.oidc_provider.arn
      },
      Action = "sts:AssumeRoleWithWebIdentity",
      Condition = {
        StringEquals = {
          "${aws_iam_openid_connect_provider.oidc_provider.url}:sub" = "system:serviceaccount:backend-namespace:bedrock-service-account"
          "${aws_iam_openid_connect_provider.oidc_provider.url}:aud" = "sts.amazonaws.com"
        }
      }
    }]
  })
}

resource "aws_iam_role_policy" "eks-irsa-policy" {
  name   = "eks-irsa-policy"
  role   = aws_iam_role.eks-irsa-role.id
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect = "Allow",
      Action = [
        "s3:ListBucket",
        "s3:GetObject"
      ],
      Resource = "*"
    }]
  })
}

resource "aws_iam_role_policy_attachment" "eks_irsa_admin_role_policy_attachment" {
  policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
  role       = aws_iam_role.eks-irsa-role.name
}


// === Kubernetes Deployment ===

provider "kubernetes" {
  host = aws_eks_cluster.eks.endpoint
  token = data.aws_eks_cluster_auth.cluster.token
  cluster_ca_certificate = base64decode(aws_eks_cluster.eks.certificate_authority[0].data)
}

# Create a Secret for ECR
resource "kubernetes_secret" "docker" {
  metadata {
    name      = "ecr-auth"
    namespace = kubernetes_namespace.backend-namespace.metadata.0.name
  }

  data = {
    ".dockerconfigjson" = jsonencode({
      auths = {
        "${data.aws_ecr_authorization_token.token.proxy_endpoint}" = {
          auth = "${data.aws_ecr_authorization_token.token.authorization_token}"
        }
      }
    })
  }

  type = "kubernetes.io/dockerconfigjson"
}

data "aws_eks_cluster_auth" "cluster" { name = aws_eks_cluster.eks.name }

resource "kubernetes_namespace" "backend-namespace" {
  metadata {
    name = "backend-namespace"
  }
}

resource "kubernetes_service_account" "bedrock-service-account" {
  metadata {
    name      = "bedrock-service-account"
    namespace = "backend-namespace"
    annotations = {
      "eks.amazonaws.com/role-arn" = aws_iam_role.eks-irsa-role.arn
    }
  }
}

resource "kubernetes_deployment" "backend-deploy" {
  metadata {
    name = "backenddeployment"
    labels = {
      test = "backenddeployment"
    }
    namespace = kubernetes_namespace.backend-namespace.metadata.0.name
  }

  spec {
    replicas = 3

    selector {
      match_labels = {
        test = "backend"
      }
    }

    template {
      metadata {
        labels = {
          test = "backend"
        }
      }

      spec {
        service_account_name = kubernetes_service_account.bedrock-service-account.metadata.0.name
        image_pull_secrets {
          name = "ecr-auth"
        }
        container {
          image = "${aws_ecr_repository.backend_docker_image.repository_url}:latest"
          name  = "backend"
          env {
            name = "AGENT_ID"
            value = aws_bedrockagent_agent.star_intern_agent.id
          }
          env {
            name = "AGENT_ALIAS_ID"
            value = aws_bedrockagent_agent_alias.star_intern_agent_alias.agent_alias_id
          }
          port {
            container_port = 8080
          }

          resources {
            limits = {
              cpu    = "0.5"
              memory = "512Mi"
            }
            requests = {
              cpu    = "250m"
              memory = "50Mi"
            }
          }
        }
      }
    }
  }
  depends_on = [
    aws_eks_cluster.eks,
    aws_eks_node_group.eks_nodes,
    null_resource.docker_push]
}

resource "kubernetes_service" "backend-service" {
  metadata {
    name = "backendservice"
    namespace = kubernetes_namespace.backend-namespace.metadata.0.name
  }

  spec {
    selector = {
      test = "backend"
    }

    port {
      port        = 80
      target_port = 8080
    }

    type = "LoadBalancer"
  }
}

data "kubernetes_service" "backend_service_ingress" {
  metadata {
    name      = "backendservice"
    namespace = "backend-namespace"
  }

  depends_on = [ kubernetes_service.backend-service ]
}


output "agent_alias_id" {
  value = aws_bedrockagent_agent_alias.star_intern_agent_alias.agent_alias_id
}

output "agent_id" {
  value = aws_bedrockagent_agent.star_intern_agent.agent_id
}

output "app_url" {
  value = "Send POST to ${data.kubernetes_service.backend_service_ingress.status.0.load_balancer.0.ingress.0.hostname}/api/code"
}